--abs_divider DEN_REPRESENTATION="SIGNED" LPM_PIPELINE=0 MAXIMIZE_SPEED=5 NUM_REPRESENTATION="SIGNED" SKIP_BITS=0 WIDTH_D=3 WIDTH_N=6 denominator numerator quotient remainder
--VERSION_BEGIN 23.1 cbx_cycloneii 2024:05:14:17:53:42:SC cbx_lpm_abs 2024:05:14:17:53:42:SC cbx_lpm_add_sub 2024:05:14:17:53:42:SC cbx_lpm_divide 2024:05:14:17:53:42:SC cbx_mgl 2024:05:14:18:00:13:SC cbx_nadder 2024:05:14:17:53:42:SC cbx_stratix 2024:05:14:17:53:42:SC cbx_stratixii 2024:05:14:17:53:42:SC cbx_util_mgl 2024:05:14:17:53:42:SC  VERSION_END


-- Copyright (C) 2024  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION alt_u_div_bie (denominator[2..0], numerator[5..0])
RETURNS ( quotient[5..0], remainder[2..0]);
FUNCTION lpm_abs_7d9 (data[2..0])
RETURNS ( overflow, result[2..0]);
FUNCTION lpm_abs_ad9 (data[5..0])
RETURNS ( overflow, result[5..0]);
FUNCTION add_sub_ave (cin, dataa[5..0], datab[5..0])
RETURNS ( result[5..0]);
FUNCTION add_sub_7ve (cin, dataa[2..0], datab[2..0])
RETURNS ( result[2..0]);

--synthesis_resources = lut 31 
SUBDESIGN abs_divider_3ag
( 
	denominator[2..0]	:	input;
	numerator[5..0]	:	input;
	quotient[5..0]	:	output;
	remainder[2..0]	:	output;
) 
VARIABLE 
	divider : alt_u_div_bie;
	my_abs_den : lpm_abs_7d9;
	my_abs_num : lpm_abs_ad9;
	compl_add_quot : add_sub_ave;
	compl_add_rem : add_sub_7ve;
	diff_signs	: WIRE;
	gnd_wire	: WIRE;
	neg_quot[5..0]	: WIRE;
	neg_rem[2..0]	: WIRE;
	norm_den[2..0]	: WIRE;
	norm_num[5..0]	: WIRE;
	num_sign	: WIRE;
	protect_quotient[5..0]	: WIRE;
	protect_remainder[2..0]	: WIRE;
	vcc_wire	: WIRE;

BEGIN 
	divider.denominator[] = norm_den[];
	divider.numerator[] = norm_num[];
	my_abs_den.data[] = denominator[];
	my_abs_num.data[] = numerator[];
	compl_add_quot.cin = vcc_wire;
	compl_add_quot.dataa[] = (! protect_quotient[]);
	compl_add_quot.datab[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	compl_add_rem.cin = vcc_wire;
	compl_add_rem.dataa[] = (! protect_remainder[]);
	compl_add_rem.datab[] = ( gnd_wire, gnd_wire, gnd_wire);
	diff_signs = (numerator[5..5] $ denominator[2..2]);
	gnd_wire = B"0";
	neg_quot[] = compl_add_quot.result[];
	neg_rem[] = compl_add_rem.result[];
	norm_den[] = my_abs_den.result[];
	norm_num[] = my_abs_num.result[];
	num_sign = numerator[5..5];
	protect_quotient[] = divider.quotient[];
	protect_remainder[] = divider.remainder[];
	quotient[] = ((protect_quotient[] & (! diff_signs)) # (neg_quot[] & diff_signs));
	remainder[] = ((protect_remainder[] & (! num_sign)) # (neg_rem[] & num_sign));
	vcc_wire = B"1";
END;
--VALID FILE
